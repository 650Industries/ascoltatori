{"name":"Ascoltatori","tagline":"The pub/sub library for node backed by Redis, AMQP (RabbitMQ), ZeroMQ, MQTT (Mosquitto) or just plain node!","body":"Ascoltatori\r\n===========\r\n\r\n[![Build\r\nStatus](https://travis-ci.org/mcollina/ascoltatori.png)](https://travis-ci.org/mcollina/ascoltatori)\r\n\r\n__Ascoltatori__ is the publish/subscribe library that support every\r\nbroker/protocol out there.\r\nThis list currently includes:\r\n\r\n* [RabbitMQ](http://www.rabbitmq.com/) and all implementations of\r\n  the [AMQP](http://www.amqp.org/) protocol.\r\n* [Redis](http://redis.io/), the fabulous key/value store by\r\n  [@antirez](https://github.com/antirez).\r\n* [Mosquitto](http://mosquitto.org/) and all implementations of the\r\n  [MQTT](http://mqtt.org/) protocol.\r\n* [ZeroMQ](http://www.zeromq.org/) without a central broker, so\r\n  Ascoltatori can also be used in a P2P fashion.\r\n\r\nThe source code of __Ascoltatori__ had been annotated with\r\n[dox](https://github.com/visionmedia/dox)\r\nand the generated documentation is available at:\r\nhttp://mcollina.github.com/ascoltatori/docs/ascoltatori.js.html\r\n\r\n> Ascoltatori is an italian word which means listeners.\r\nAn Ascoltatore is therefore a single listener.\r\n\r\n## Usage\r\n\r\n__Ascoltatori__ is built to be extremely easy to use, and can provide a\r\nuseful abstraction for every compatible pub/sub broker.\r\nIn this way you can choose whatever broker suits you.\r\n\r\n```\r\nvar ascoltatori = require('ascoltatori');\r\n\r\nascoltatori.build(function (ascoltatore) {\r\n\r\n  ascoltatore.subscribe(\"hello/*\", function() {\r\n    // this will print { '0': \"hello/42\", '1': \"a message\" }\r\n    console.log(arguments); \r\n    process.exit(0);\r\n  });\r\n\r\n  ascoltatore.publish(\"hello/42\", \"a message\", function() {\r\n    console.log(\"message published\");\r\n  });\r\n});\r\n```\r\n\r\nSee the tests for more examples regarding RedisAscoltatore,\r\nAMQPAscoltatore, ZeromqAscoltatore, MQTTAscoltatore.\r\n\r\nIn the test/common.js file you can find all the options for\r\nall the ascoltatori.\r\n\r\nAll ascoltatori supports the use of a wildcards, so everything\r\nshould work smoothly on every broker.\r\nYou might find some differences, and in that case file a bug\r\nreport, so I can fix them.\r\n\r\n### Domain support\r\n\r\n__Ascoltatori__ properly supports the [node.js domain API](http://nodejs.org/api/domain.html).\r\nTo use it, you have to call the `registerDomain` function on your\r\n_Ascoltatore_, and it will take care of routing the exceptions to the\r\ngiven domain. Look at this example:\r\n```\r\nvar ascoltatori = require('ascoltatori');\r\nvar domain      = require(\"domain\");\r\n\r\nvar d = domain.create();\r\nd.on(\"error\", function() {\r\n  console.log(arguments); \r\n  process.exit(0);\r\n});\r\n\r\nascoltatori.build(function (ascoltatore) {\r\n\r\n  ascoltatore.registerDomain(d);\r\n\r\n  ascoltatore.subscribe(\"hello/*\", function() {\r\n    throw new Error();\r\n  });\r\n\r\n  ascoltatore.publish(\"hello/42\", \"a message\", function() {\r\n    console.log(\"message published\");\r\n  });\r\n});\r\n```\r\n\r\n## Dependencies\r\n\r\nThis library does not depend directly on redis, AMQP (RabbitMQ),\r\nzmq, MQTT.js, but rather it encourages you to pass them to the\r\nascoltatori via an options object, like so (for Redis):\r\n\r\n```\r\nvar ascoltatori = require('ascoltatori');\r\n\r\nvar settings = {\r\n  type: 'redis',\r\n  redis: require('redis'),\r\n  db: 12,\r\n  port: 424242,\r\n  host: 192.168.42.42\r\n};\r\n\r\nascoltatori.build(settings, function (ascoltatore) {\r\n\r\n  ascoltatore.subscribe(\"hello/*\", function() {\r\n    // this will print { '0': \"hello/42\", '1': \"a message\" }\r\n    console.log(arguments); \r\n    process.exit(0);\r\n  });\r\n\r\n  ascoltatore.publish(\"hello/42\", \"a message\", function() {\r\n    console.log(\"message published\");\r\n  });\r\n});\r\n\r\n```\r\n\r\nIf you feel one more option is missing, feel free to fork this library,\r\nadd it, and then send a pull request.\r\n\r\n## Install\r\n\r\n```\r\nnpm install ascoltatori\r\n```\r\n\r\n## Debugging\r\n\r\n__Ascoltatori__ supports the clever\r\n[debug](https://github.com/visionmedia/debug) package, so it is able to\r\ntrigger the logging based on an external enviroment variable, like so:\r\n```\r\n$: DEBUG=ascoltatori:mqtt node exaples/mqtt_topic_bridge.js\r\n```\r\n\r\nThe following debug flags are supported, one for each ascoltatore:\r\n* `ascoltatori:amqp`\r\n* `ascoltatori:memory`\r\n* `ascoltatori:mqtt`\r\n* `ascoltatori:prefix`\r\n* `ascoltatori:redis`\r\n* `ascoltatori:zmq`\r\n\r\n## Contributing to Ascoltatori\r\n\r\n* Check out the latest master to make sure the feature hasn't been\r\n  implemented or the bug hasn't been fixed yet\r\n* Check out the issue tracker to make sure someone already hasn't\r\n  requested it and/or contributed it\r\n* Fork the project\r\n* Start a feature/bugfix branch\r\n* Commit and push until you are happy with your contribution\r\n* Make sure to add tests for it. This is important so I don't break it\r\n  in a future version unintentionally.\r\n* Please try not to mess with the Makefile and package.json. If you\r\n  want to have your own version, or is otherwise necessary, that is\r\n  fine, but please isolate to its own commit so I can cherry-pick around\r\n  it.\r\n\r\n## LICENSE - \"MIT License\"\r\n\r\nCopyright (c) 2012-2013 Matteo Collina, http://matteocollina.com\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-20777444-4","note":"Don't delete this file! It's used internally to help with page regeneration."}